[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pycc"
version = "0.0.0"
description = "An attempt at a C parser in Python."
requires-python = ">=3.9"
license = "MIT"
readme = { file = "README.rst", content-type = "text/x-rst" }
authors = [{ name = "Sachaa-Thanasius", email = "sachaathanasius@gmail.com" }]


# -------- Test config

[tool.pytest.ini_options]
pythonpath = "src"
addopts = ["--import-mode=importlib", "--strict-markers", "--strict-config"]

[tool.coverage.paths]
pycc = ["src"]

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["pycc", "tests"]

[tool.coverage.report]
fail_under = 90
exclude_lines = ["^\\s*(?:el)?if TYPE_CHECKING:$"]


# -------- Linter config

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "F",
    "E",
    "I",
    "UP",
    "YTT",
    "ANN",
    "ASYNC",
    "S",
    "BLE",
    # "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "ISC",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "RSE",
    "RET",
    "SIM",
    "TID",
    # "PTH",  # os.path is a better fit here for performance reasons.
    "ERA",
    "PL",
    "TRY",
    "PERF",
    "FURB",
    "RUF",
]
extend-ignore = [
    # ---- General
    "S101",    # Use of assert here is a known quantity for typing cases. All uses should be safe to optimize out.
    "SIM105",  # Suppressable exception. contextlib.suppress is a stylistic choice with overhead.
    "C90",     # McCabe complexity.
    "ANN204",  # Special method return types are usually implicit and/or known by type checker.
    "ANN401",  # Any is needed for some annotations.
    "UP038",   # isinstance performs better with tuples than unions.
    "PT001",   # pytest recommends against empty parentheses on pytest.fixture.
    "PD011",   # Erroneous issue that triggers for any .values attribute access at all.
    "PLR2004", # "Magic number" depends on the use case.
    "RUF002",  # "Ambiguous character" depends on the use case.
    "RUF003",  # "Ambiguous character" depends on the use case.
    "RUF022",  # __all__ ordering can be meaningful.
    "RUF023",  # __slots__ ordering can be meaningful. 

    # ---- Recommended by Ruff when using Ruff format
    "E111",
    "E114",
    "E117",
    "E501",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",

    # ---- Project-specific rules
    # Readability
    "RET505", # el(se|if) after return.
    "RET506", # el(se|if) after raise.
    "RET508", # el(se|if) after break.
    "SIM108", # if-else instead of a ternary.
]
unfixable = [
    "ERA", # Prevent unlikely erroneous deletion.
]

[tool.ruff.lint.isort]
lines-after-imports = 2
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"tests/**/test_*.py" = [
    "T201",   # Printing.
    "T203",   # Pretty-printing.
    "ANN001", # Annotations for parameters.
    "ANN201", # Annotations for public function returns.
    "ANN202", # Annotations for private function returns.
]


# -------- Type-checker config

[tool.pyright]
include = ["src/pycc", "tests"]
pythonVersion = "3.9"
pythonPlatform = "All"
typeCheckingMode = "strict"

reportPrivateUsage = "none"
reportUnnecessaryIsInstance = "information"
reportCallInDefaultInitializer = "warning"
reportImportCycles = "information"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
